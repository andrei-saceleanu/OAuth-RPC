/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _TEMA1_H_RPCGEN
#define _TEMA1_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


enum response_code {
	OK = 0,
	USER_NOT_FOUND = 1,
	REQUEST_DENIED = 2,
	PERMISSION_DENIED = 3,
	TOKEN_EXPIRED = 4,
	RESOURCE_NOT_FOUND = 5,
	OPERATION_NOT_PERMITTED = 6,
	PERMISSION_GRANTED = 7,
};
typedef enum response_code response_code;

struct auth_response {
	char *token;
	response_code code;
};
typedef struct auth_response auth_response;

struct access_response {
	char *token;
	char *refresh_token;
	int availability;
	response_code code;
};
typedef struct access_response access_response;

struct access_params {
	char *id;
	char *token;
	int refresh;
};
typedef struct access_params access_params;

struct refresh_params {
	char *access_token;
	char *refresh_token;
	int refresh;
};
typedef struct refresh_params refresh_params;

struct valid_action_params {
	char *op;
	char *resource;
	char *access_token;
};
typedef struct valid_action_params valid_action_params;

#define TEMA1_PROG 0x12345678
#define TEMA1_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define request_auth_token 1
extern  auth_response * request_auth_token_1(char **, CLIENT *);
extern  auth_response * request_auth_token_1_svc(char **, struct svc_req *);
#define request_access_token 2
extern  access_response * request_access_token_1(struct access_params *, CLIENT *);
extern  access_response * request_access_token_1_svc(struct access_params *, struct svc_req *);
#define validate_delegated_action 3
extern  int * validate_delegated_action_1(struct valid_action_params *, CLIENT *);
extern  int * validate_delegated_action_1_svc(struct valid_action_params *, struct svc_req *);
#define approve_auth_token 4
extern  char ** approve_auth_token_1(char **, CLIENT *);
extern  char ** approve_auth_token_1_svc(char **, struct svc_req *);
#define get_fresh_token 5
extern  access_response * get_fresh_token_1(struct refresh_params *, CLIENT *);
extern  access_response * get_fresh_token_1_svc(struct refresh_params *, struct svc_req *);
extern int tema1_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define request_auth_token 1
extern  auth_response * request_auth_token_1();
extern  auth_response * request_auth_token_1_svc();
#define request_access_token 2
extern  access_response * request_access_token_1();
extern  access_response * request_access_token_1_svc();
#define validate_delegated_action 3
extern  int * validate_delegated_action_1();
extern  int * validate_delegated_action_1_svc();
#define approve_auth_token 4
extern  char ** approve_auth_token_1();
extern  char ** approve_auth_token_1_svc();
#define get_fresh_token 5
extern  access_response * get_fresh_token_1();
extern  access_response * get_fresh_token_1_svc();
extern int tema1_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_response_code (XDR *, response_code*);
extern  bool_t xdr_auth_response (XDR *, auth_response*);
extern  bool_t xdr_access_response (XDR *, access_response*);
extern  bool_t xdr_access_params (XDR *, access_params*);
extern  bool_t xdr_refresh_params (XDR *, refresh_params*);
extern  bool_t xdr_valid_action_params (XDR *, valid_action_params*);

#else /* K&R C */
extern bool_t xdr_response_code ();
extern bool_t xdr_auth_response ();
extern bool_t xdr_access_response ();
extern bool_t xdr_access_params ();
extern bool_t xdr_refresh_params ();
extern bool_t xdr_valid_action_params ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_TEMA1_H_RPCGEN */
